# 4.9 BST Sequence: A binary search tree was created by traversing through an array from left to right
# and inserting each element. Given a binary search tree with distinct elements, print all possible
# arrays that could have led to this tree.
# EXMPLE
# Input: 2 -> 1, 2 -> 3
# Output: {2, 1, 3}, {2, 3, 1}

import pdb

class Node:
	def __init__(self, value):
		self.left = None
		self.right = None
		self.value = value

	def set_left(self, left):
		self.left = left

	def set_right(self, right):
		self.right = right

def generate_arrays(array, candidates):
	""" for each tree, to generate this tree, it requires that the root must appear before any of its
	offsprings, and so does its every subtree
	>>> n0 = Node(2)
	>>> n1 = Node(1)
	>>> n2 = Node(3)
	>>> n0.set_left(n1)
	>>> n0.set_right(n2)
	>>> generate_arrays([], [n0])
	[2, 1, 3]
	[2, 3, 1]
	>>> n0 = Node(8)
	>>> n1 = Node(6)
	>>> n2 = Node(10)
	>>> n3 = Node(3)
	>>> n4 = Node(7)
	>>> n5 = Node(9)
	>>> n6 = Node(11)
	>>> n7 = Node(2)
	>>> n0.set_left(n1)
	>>> n0.set_right(n2)
	>>> n1.set_left(n3)
	>>> n1.set_right(n4)
	>>> n2.set_left(n5)
	>>> n2.set_right(n6)
	>>> n3.set_left(n7)
	>>> generate_arrays([], [n0])
	[8, 6, 10, 3, 7, 9, 11, 2]
	[8, 6, 10, 3, 7, 9, 2, 11]
	[8, 6, 10, 3, 7, 11, 9, 2]
	[8, 6, 10, 3, 7, 11, 2, 9]
	[8, 6, 10, 3, 7, 2, 9, 11]
	[8, 6, 10, 3, 7, 2, 11, 9]
	[8, 6, 10, 3, 9, 7, 11, 2]
	[8, 6, 10, 3, 9, 7, 2, 11]
	[8, 6, 10, 3, 9, 11, 7, 2]
	[8, 6, 10, 3, 9, 11, 2, 7]
	[8, 6, 10, 3, 9, 2, 7, 11]
	[8, 6, 10, 3, 9, 2, 11, 7]
	[8, 6, 10, 3, 11, 7, 9, 2]
	[8, 6, 10, 3, 11, 7, 2, 9]
	[8, 6, 10, 3, 11, 9, 7, 2]
	[8, 6, 10, 3, 11, 9, 2, 7]
	[8, 6, 10, 3, 11, 2, 7, 9]
	[8, 6, 10, 3, 11, 2, 9, 7]
	[8, 6, 10, 3, 2, 7, 9, 11]
	[8, 6, 10, 3, 2, 7, 11, 9]
	[8, 6, 10, 3, 2, 9, 7, 11]
	[8, 6, 10, 3, 2, 9, 11, 7]
	[8, 6, 10, 3, 2, 11, 7, 9]
	[8, 6, 10, 3, 2, 11, 9, 7]
	[8, 6, 10, 7, 3, 9, 11, 2]
	[8, 6, 10, 7, 3, 9, 2, 11]
	[8, 6, 10, 7, 3, 11, 9, 2]
	[8, 6, 10, 7, 3, 11, 2, 9]
	[8, 6, 10, 7, 3, 2, 9, 11]
	[8, 6, 10, 7, 3, 2, 11, 9]
	[8, 6, 10, 7, 9, 3, 11, 2]
	[8, 6, 10, 7, 9, 3, 2, 11]
	[8, 6, 10, 7, 9, 11, 3, 2]
	[8, 6, 10, 7, 11, 3, 9, 2]
	[8, 6, 10, 7, 11, 3, 2, 9]
	[8, 6, 10, 7, 11, 9, 3, 2]
	[8, 6, 10, 9, 3, 7, 11, 2]
	[8, 6, 10, 9, 3, 7, 2, 11]
	[8, 6, 10, 9, 3, 11, 7, 2]
	[8, 6, 10, 9, 3, 11, 2, 7]
	[8, 6, 10, 9, 3, 2, 7, 11]
	[8, 6, 10, 9, 3, 2, 11, 7]
	[8, 6, 10, 9, 7, 3, 11, 2]
	[8, 6, 10, 9, 7, 3, 2, 11]
	[8, 6, 10, 9, 7, 11, 3, 2]
	[8, 6, 10, 9, 11, 3, 7, 2]
	[8, 6, 10, 9, 11, 3, 2, 7]
	[8, 6, 10, 9, 11, 7, 3, 2]
	[8, 6, 10, 11, 3, 7, 9, 2]
	[8, 6, 10, 11, 3, 7, 2, 9]
	[8, 6, 10, 11, 3, 9, 7, 2]
	[8, 6, 10, 11, 3, 9, 2, 7]
	[8, 6, 10, 11, 3, 2, 7, 9]
	[8, 6, 10, 11, 3, 2, 9, 7]
	[8, 6, 10, 11, 7, 3, 9, 2]
	[8, 6, 10, 11, 7, 3, 2, 9]
	[8, 6, 10, 11, 7, 9, 3, 2]
	[8, 6, 10, 11, 9, 3, 7, 2]
	[8, 6, 10, 11, 9, 3, 2, 7]
	[8, 6, 10, 11, 9, 7, 3, 2]
	[8, 6, 3, 10, 7, 2, 9, 11]
	[8, 6, 3, 10, 7, 2, 11, 9]
	[8, 6, 3, 10, 7, 9, 2, 11]
	[8, 6, 3, 10, 7, 9, 11, 2]
	[8, 6, 3, 10, 7, 11, 2, 9]
	[8, 6, 3, 10, 7, 11, 9, 2]
	[8, 6, 3, 10, 2, 7, 9, 11]
	[8, 6, 3, 10, 2, 7, 11, 9]
	[8, 6, 3, 10, 2, 9, 7, 11]
	[8, 6, 3, 10, 2, 9, 11, 7]
	[8, 6, 3, 10, 2, 11, 7, 9]
	[8, 6, 3, 10, 2, 11, 9, 7]
	[8, 6, 3, 10, 9, 7, 2, 11]
	[8, 6, 3, 10, 9, 7, 11, 2]
	[8, 6, 3, 10, 9, 2, 7, 11]
	[8, 6, 3, 10, 9, 2, 11, 7]
	[8, 6, 3, 10, 9, 11, 7, 2]
	[8, 6, 3, 10, 9, 11, 2, 7]
	[8, 6, 3, 10, 11, 7, 2, 9]
	[8, 6, 3, 10, 11, 7, 9, 2]
	[8, 6, 3, 10, 11, 2, 7, 9]
	[8, 6, 3, 10, 11, 2, 9, 7]
	[8, 6, 3, 10, 11, 9, 7, 2]
	[8, 6, 3, 10, 11, 9, 2, 7]
	[8, 6, 3, 7, 10, 2, 9, 11]
	[8, 6, 3, 7, 10, 2, 11, 9]
	[8, 6, 3, 7, 10, 9, 2, 11]
	[8, 6, 3, 7, 10, 9, 11, 2]
	[8, 6, 3, 7, 10, 11, 2, 9]
	[8, 6, 3, 7, 10, 11, 9, 2]
	[8, 6, 3, 7, 2, 10, 9, 11]
	[8, 6, 3, 7, 2, 10, 11, 9]
	[8, 6, 3, 2, 10, 7, 9, 11]
	[8, 6, 3, 2, 10, 7, 11, 9]
	[8, 6, 3, 2, 10, 9, 7, 11]
	[8, 6, 3, 2, 10, 9, 11, 7]
	[8, 6, 3, 2, 10, 11, 7, 9]
	[8, 6, 3, 2, 10, 11, 9, 7]
	[8, 6, 3, 2, 7, 10, 9, 11]
	[8, 6, 3, 2, 7, 10, 11, 9]
	[8, 6, 7, 10, 3, 9, 11, 2]
	[8, 6, 7, 10, 3, 9, 2, 11]
	[8, 6, 7, 10, 3, 11, 9, 2]
	[8, 6, 7, 10, 3, 11, 2, 9]
	[8, 6, 7, 10, 3, 2, 9, 11]
	[8, 6, 7, 10, 3, 2, 11, 9]
	[8, 6, 7, 10, 9, 3, 11, 2]
	[8, 6, 7, 10, 9, 3, 2, 11]
	[8, 6, 7, 10, 9, 11, 3, 2]
	[8, 6, 7, 10, 11, 3, 9, 2]
	[8, 6, 7, 10, 11, 3, 2, 9]
	[8, 6, 7, 10, 11, 9, 3, 2]
	[8, 6, 7, 3, 10, 2, 9, 11]
	[8, 6, 7, 3, 10, 2, 11, 9]
	[8, 6, 7, 3, 10, 9, 2, 11]
	[8, 6, 7, 3, 10, 9, 11, 2]
	[8, 6, 7, 3, 10, 11, 2, 9]
	[8, 6, 7, 3, 10, 11, 9, 2]
	[8, 6, 7, 3, 2, 10, 9, 11]
	[8, 6, 7, 3, 2, 10, 11, 9]
	[8, 10, 6, 9, 11, 3, 7, 2]
	[8, 10, 6, 9, 11, 3, 2, 7]
	[8, 10, 6, 9, 11, 7, 3, 2]
	[8, 10, 6, 9, 3, 11, 7, 2]
	[8, 10, 6, 9, 3, 11, 2, 7]
	[8, 10, 6, 9, 3, 7, 11, 2]
	[8, 10, 6, 9, 3, 7, 2, 11]
	[8, 10, 6, 9, 3, 2, 11, 7]
	[8, 10, 6, 9, 3, 2, 7, 11]
	[8, 10, 6, 9, 7, 11, 3, 2]
	[8, 10, 6, 9, 7, 3, 11, 2]
	[8, 10, 6, 9, 7, 3, 2, 11]
	[8, 10, 6, 11, 9, 3, 7, 2]
	[8, 10, 6, 11, 9, 3, 2, 7]
	[8, 10, 6, 11, 9, 7, 3, 2]
	[8, 10, 6, 11, 3, 9, 7, 2]
	[8, 10, 6, 11, 3, 9, 2, 7]
	[8, 10, 6, 11, 3, 7, 9, 2]
	[8, 10, 6, 11, 3, 7, 2, 9]
	[8, 10, 6, 11, 3, 2, 9, 7]
	[8, 10, 6, 11, 3, 2, 7, 9]
	[8, 10, 6, 11, 7, 9, 3, 2]
	[8, 10, 6, 11, 7, 3, 9, 2]
	[8, 10, 6, 11, 7, 3, 2, 9]
	[8, 10, 6, 3, 9, 11, 7, 2]
	[8, 10, 6, 3, 9, 11, 2, 7]
	[8, 10, 6, 3, 9, 7, 11, 2]
	[8, 10, 6, 3, 9, 7, 2, 11]
	[8, 10, 6, 3, 9, 2, 11, 7]
	[8, 10, 6, 3, 9, 2, 7, 11]
	[8, 10, 6, 3, 11, 9, 7, 2]
	[8, 10, 6, 3, 11, 9, 2, 7]
	[8, 10, 6, 3, 11, 7, 9, 2]
	[8, 10, 6, 3, 11, 7, 2, 9]
	[8, 10, 6, 3, 11, 2, 9, 7]
	[8, 10, 6, 3, 11, 2, 7, 9]
	[8, 10, 6, 3, 7, 9, 11, 2]
	[8, 10, 6, 3, 7, 9, 2, 11]
	[8, 10, 6, 3, 7, 11, 9, 2]
	[8, 10, 6, 3, 7, 11, 2, 9]
	[8, 10, 6, 3, 7, 2, 9, 11]
	[8, 10, 6, 3, 7, 2, 11, 9]
	[8, 10, 6, 3, 2, 9, 11, 7]
	[8, 10, 6, 3, 2, 9, 7, 11]
	[8, 10, 6, 3, 2, 11, 9, 7]
	[8, 10, 6, 3, 2, 11, 7, 9]
	[8, 10, 6, 3, 2, 7, 9, 11]
	[8, 10, 6, 3, 2, 7, 11, 9]
	[8, 10, 6, 7, 9, 11, 3, 2]
	[8, 10, 6, 7, 9, 3, 11, 2]
	[8, 10, 6, 7, 9, 3, 2, 11]
	[8, 10, 6, 7, 11, 9, 3, 2]
	[8, 10, 6, 7, 11, 3, 9, 2]
	[8, 10, 6, 7, 11, 3, 2, 9]
	[8, 10, 6, 7, 3, 9, 11, 2]
	[8, 10, 6, 7, 3, 9, 2, 11]
	[8, 10, 6, 7, 3, 11, 9, 2]
	[8, 10, 6, 7, 3, 11, 2, 9]
	[8, 10, 6, 7, 3, 2, 9, 11]
	[8, 10, 6, 7, 3, 2, 11, 9]
	[8, 10, 9, 6, 11, 3, 7, 2]
	[8, 10, 9, 6, 11, 3, 2, 7]
	[8, 10, 9, 6, 11, 7, 3, 2]
	[8, 10, 9, 6, 3, 11, 7, 2]
	[8, 10, 9, 6, 3, 11, 2, 7]
	[8, 10, 9, 6, 3, 7, 11, 2]
	[8, 10, 9, 6, 3, 7, 2, 11]
	[8, 10, 9, 6, 3, 2, 11, 7]
	[8, 10, 9, 6, 3, 2, 7, 11]
	[8, 10, 9, 6, 7, 11, 3, 2]
	[8, 10, 9, 6, 7, 3, 11, 2]
	[8, 10, 9, 6, 7, 3, 2, 11]
	[8, 10, 9, 11, 6, 3, 7, 2]
	[8, 10, 9, 11, 6, 3, 2, 7]
	[8, 10, 9, 11, 6, 7, 3, 2]
	[8, 10, 11, 6, 9, 3, 7, 2]
	[8, 10, 11, 6, 9, 3, 2, 7]
	[8, 10, 11, 6, 9, 7, 3, 2]
	[8, 10, 11, 6, 3, 9, 7, 2]
	[8, 10, 11, 6, 3, 9, 2, 7]
	[8, 10, 11, 6, 3, 7, 9, 2]
	[8, 10, 11, 6, 3, 7, 2, 9]
	[8, 10, 11, 6, 3, 2, 9, 7]
	[8, 10, 11, 6, 3, 2, 7, 9]
	[8, 10, 11, 6, 7, 9, 3, 2]
	[8, 10, 11, 6, 7, 3, 9, 2]
	[8, 10, 11, 6, 7, 3, 2, 9]
	[8, 10, 11, 9, 6, 3, 7, 2]
	[8, 10, 11, 9, 6, 3, 2, 7]
	[8, 10, 11, 9, 6, 7, 3, 2]
	"""
	if len(candidates) == 0:
		print(array)
		return

	# pdb.set_trace()

	for i in range(len(candidates)):
		node = candidates[i]
		copy_array = array.copy()
		copy_array.append(node.value)

		# pdb.set_trace()

		if node.left is None and node.right is None:
			copy_candidates = []
			copy_candidates.extend(candidates[:i])
			copy_candidates.extend(candidates[i+1:])
		elif node.left is None:
			copy_candidates = []
			copy_candidates.extend(candidates[:i])
			copy_candidates.extend(candidates[i+1:])
			copy_candidates.append(node.right)
		elif node.right is None:
			copy_candidates = []
			copy_candidates.extend(candidates[:i])
			copy_candidates.extend(candidates[i+1:])
			copy_candidates.append(node.left)
		else:
			copy_candidates = []
			copy_candidates.extend(candidates[:i])
			copy_candidates.extend(candidates[i+1:])
			copy_candidates.extend([node.left, node.right])
		generate_arrays(copy_array, copy_candidates)


if __name__ == "__main__":
	import doctest
	doctest.testmod()